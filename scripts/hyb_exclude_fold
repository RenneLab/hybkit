#!/usr/bin/env python3
# Daniel B. Stribling
# Renne Lab, University of Florida
# Hybkit Project : http://www.github.com/RenneLab/hybkit

"""
Read one or more ".vienna" or ".ct" format secondary structure files and
ouput records that are not excluded in the correpsonding exclusion table.
"""

import sys
import os
import argparse
import textwrap
import hybkit

# Import module-level dunder-names:
from hybkit.__about__ import (__author__, __contact__, __credits__, __date__, __deprecated__,
                              __email__, __license__, __maintainer__, __status__, __version__)
# Divide docstring into argparse and full portions.
argparse_doc = __doc__ + '\nFor full script description and usage, see the hybkit documentation.'
__doc__ += textwrap.dedent("""
    This script takes one or more fold files in
    "Vienna" (:ref:`Vienna Format <vienna_file_format>`) or
    "CT" (:ref:`CT Format <ct_file_format>`) formats,
    as well as an "exclusion table" generated by hyb_exclude_fold to filter the fold file to
    only those records not excluded in the exclusion table.

    Example System Calls:
        ::

            hyb_exclude_fold -f my_file_1.vienna -e my_file_1_exclude.csv

            hyb_exclude_fold -f my_file_1.ct my_file_2.ct \
                             -e my_file_1_exclude.csv my_file_2_exclude.csv

    """)

__doc__ += hybkit.util.output_description


# Create Command-line Argument Parser
def make_parser():
    script_args = argparse.ArgumentParser(add_help=False)
    parser_components = [hybkit.util.in_folds_parser,
                         hybkit.util.out_fold_opts_parser,
                         hybkit.util.hyb_exclude_fold_parser,
                         hybkit.util.gen_opts_parser,
                         hybkit.util.foldrecord_parser,
                         hybkit.util.foldfile_parser,
                         ]
    # replace_pairs = [('|', ''), ('==', ''), ('`` :', '":'), (' ``', '."')]
    use_argparse_doc = argparse_doc
    # for q, r in replace_pairs:
    #     use_argparse_doc = use_argparse_doc.replace(q, r)
    # use_argparse_doc = '. '.join([x.strip() for x in use_argparse_doc.split('.')])

    script_parser = argparse.ArgumentParser(
        parents=parser_components,
        description=use_argparse_doc,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        allow_abbrev=False,
    )

    script_parser.set_defaults(out_suffix=hybkit.settings._FILTER_OUT_SUFFIX)

    return script_parser


# Define main script function.
def hyb_exclude_fold(in_fold_files, exclude_tables,
                     out_dir='.',
                     out_suffix=hybkit.settings._FILTER_OUT_SUFFIX,
                     out_fold_files=None,
                     verbose=False, silent=False):
    """Perform main script function."""

    if not silent:
        print('\nFiltering Fold Files...')

    for i, in_fold_file in enumerate(in_fold_files):
        exclude_table_file = exclude_tables[i]
        file_basename = os.path.basename(in_fold_file)
        file_label = file_basename
        use_suffix = None
        for fold_suffix in hybkit.settings.FOLD_SUFFIXES:
            if file_label.endswith(fold_suffix):
                use_suffix = fold_suffix
                file_label = file_label.replace(fold_suffix, '')
        if use_suffix is None:
            message = 'Suffix for file cannot be identified:\n'
            message += '    ' + file_label
            print(message)
            raise Exception(message)

        if out_fold_files is not None:
            out_fold_file = out_fold_files[i]
        else:
            out_fold_file = hybkit.util.make_out_file_name(in_fold_file,
                                                           name_suffix=out_suffix,
                                                           in_suffix=use_suffix,
                                                           out_suffix=use_suffix,
                                                           out_dir=out_dir,
                                                           seg_sep='_',
                                                           )

        if verbose:
            print('Filtering File:')
            print('    Input : ' + in_fold_file)
            print('    Table : ' + exclude_table_file)
            print('    Output: ' + out_fold_file)

        include_count = 0
        exclude_count = 0

        if 'vienna' in use_suffix.lower():
            FoldClass = hybkit.ViennaFile
        elif 'ct' in use_suffix.lower():
            FoldClass = hybkit.CTFile
        else:
            message = 'Suffix cannot be identified:\n'
            message += '    ' + use_suffix
            print(message)
            raise Exception(message)

        exclude_vals = {}
        with open(exclude_table_file, 'r') as exclude_table:
            for exclude_line in exclude_table:
                i, exclude_str, record_id = exclude_line.strip().split(',')
                exclude_vals[int(i)] = bool(int(exclude_str))

        with FoldClass.open(in_fold_file, 'r') as in_fold,\
             FoldClass.open(out_fold_file, 'w') as out_fold:
            for i, record in enumerate(in_fold, start=1):
                if exclude_vals[i]:
                    include_count += 1
                    if isinstance(record, tuple):
                        out_fold.write_direct(record[1])
                    else:
                        out_fold.write_record(record)
                else:
                    exclude_count += 1

        total_count = include_count + exclude_count
        if verbose:
            print('    Complete. %i Total,  ' % total_count
                  + '%i Included,  %i Excluded\n' % (include_count, exclude_count))

    if verbose:
        print('\nFold Filtering Complete.\n')


# Execute the script function
if __name__ == '__main__':
    script_parser = make_parser()
    args = script_parser.parse_args()
    hybkit.util.validate_args(args, script_parser)
    hybkit.util.set_settings(args, verbose=args.verbose)
    hyb_exclude_fold(args.in_fold,
                     args.exclusion_table,
                     out_dir=args.out_dir,
                     out_suffix=args.out_suffix,
                     out_fold_files=args.out_fold,
                     verbose=args.verbose,
                     silent=args.silent,
                     )
