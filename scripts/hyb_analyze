#!/usr/bin/env python3
# Daniel B. Stribling
# Renne Lab, University of Florida
# Hybkit Project : http://www.github.com/RenneLab/hybkit

"""
Read one or more '.hyb' format files and analyze the contained hybrid sequences.

Analysis Types:

    ============================== ==============================================================
    ``energy`` : Energy Analysis   Analyze of predicted folding energies of hyb_records
    ``type`` : Type Analysis       Analyze of segment types included in the analyzed hyb_records
    ``mirna`` : miRNA Analysis     Analyze counts/types of miRNA in hyb records
    ============================== ==============================================================

    This utility reads in one or more files in hyb-format
    (see the :ref:`Hybkit Hyb File Specification`)
    and analyzes hybrid record properties.

    ``energy`` Analysis:
       Analyze hybrid predicted energies of folding.

       Example system calls:
            ::

                $ hyb_analyze -a energy -i my_file_1.hyb

                $ hyb_analyze -a energy type mirna -i my_file_1.hyb \\
                           --make_plots False

    ``type`` Analysis:
        Analyze hybrid types.

        Requires the record flags: :ref:`seg1_type <seg1_type>`
        and :ref:`seg2_type <seg2_type>` to be set by the :meth:`hybkit.HybRecord.eval_types`
        method.

        Example system calls:
            ::

                $ hyb_analyze -a type -i my_file_1.hyb

                $ hyb_analyze -a energy type mirna -i my_file_1.hyb \\
                           --make_plots False

    ``mirna`` Analysis:
        Analyze miRNA counts.

        Requires the record flag: :ref:`miRNA_seg <mirna_seg>`
        to be set by the :meth:`hybkit.HybRecord.eval_mirna`
        method.

        Example system calls:
            ::

                $ hyb_analyze -a mirna -i my_file_1.hyb

                $ hyb_analyze -a energy type mirna -i my_file_1.hyb \\
                            --make_plots False
"""

import sys
import os
import argparse
import textwrap
import hybkit

# Import module-level dunder-names:
from hybkit.__about__ import (__author__, __contact__, __credits__, __date__, __deprecated__,
                              __email__, __license__, __maintainer__, __status__, __version__)

# Divide docstring into argparse and full portions.
__doc__ += hybkit.util.output_description


# Create Command-line Argument Parser
def make_parser():
    script_args = argparse.ArgumentParser(add_help=False)
    parser_components = [
        hybkit.util.in_hybs_parser,
        hybkit.util.out_analysis_parser,
        hybkit.util.hyb_analyze_parser,
        hybkit.util.all_analyze_parser,
        hybkit.util.gen_opts_parser,
        hybkit.util.hybrecord_parser,
        hybkit.util.hybfile_parser,
        hybkit.util.analysis_parser,
    ]

    script_parser = argparse.ArgumentParser(
        parents=parser_components,
        description=hybkit.util.get_argparse_doc(__doc__),
        formatter_class=hybkit.util._HybkitFormatter,
        allow_abbrev=False,
    )

    # script_parser.set_defaults(out_suffix=hybkit.settings._EVAL_OUT_SUFFIX)

    return script_parser


# Define main script function.
def hyb_analyze(in_hyb_files,
                analysis_types,
                out_dir='.',
                out_suffix=None,
                out_basenames=None,
                analysis_name=None,
                make_plots=False,
                verbose=False, silent=False
                ):
    """Perform main script function."""

    if not silent:
        print('\nPerforming Analysis of Hyb Files...')

    if verbose:
        print('\nPerforming Analysis Types: ' + ', '.join(analysis_types))
        if analysis_name:
            print('Analysis Title: "%s"' % analysis_name)
        print()

    if out_suffix is None:
        if len(analysis_types) > 1:
            out_suffix = '_multi-analysis'
        else:
            out_suffix = '_' + analysis_types[0]
    if verbose:
        print('Using Out Suffix: "%s"' % out_suffix)

    combined_analysis = hybkit.analysis.Analysis(analysis_types, name=analysis_name)

    for i, in_hyb_file in enumerate(in_hyb_files):
        file_basename = os.path.basename(in_hyb_file)
        if out_basenames is not None:
            out_basename = out_basenames[i]
        else:
            out_basename = hybkit.util.make_out_file_name(
                in_hyb_file,
                name_suffix=out_suffix,
                in_suffix='.hyb',
                out_suffix='',
                out_dir=out_dir,
                seg_sep='_',
            )

        if verbose:
            print('Analyzing File:')
            print('    Input   : ' + in_hyb_file)
            print('    Out Base: ' + out_basename)

        with hybkit.HybFile.open(in_hyb_file, 'r') as in_hyb:
            combined_analysis.add_hyb_records(in_hyb)

        combined_analysis.write_analysis_results_special(out_basename=out_basename)
        if make_plots:
            combined_analysis.plot_analysis_results(out_basename=out_basename)

    if verbose:
        print('\nAnalysis Complete.\n')


# Execute the script function
if __name__ == '__main__':
    script_parser = make_parser()
    args = script_parser.parse_args()
    hybkit.util.validate_args(args, script_parser)
    hybkit.util.set_settings_from_namespace(args, verbose=args.verbose)
    hyb_analyze(
        args.in_hyb,
        args.analysis_types,
        args.out_dir,
        out_suffix=args.out_suffix,
        out_basenames=args.out_basename,
        analysis_name=args.analysis_name,
        make_plots=args.make_plots,
        verbose=args.verbose,
        silent=args.silent,
    )
